# -*- coding: utf-8 -*-
"""CODE.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-GI1mcoAxaa-6YoNCMyHC2b4FBK0bXsV
"""

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as sns
# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All" 
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

data = pd.read_csv('/kaggle/input/crime-in-baltimore/BPD_Part_1_Victim_Based_Crime_Data.csv')

#

null_count = data.isnull().sum()
null_prop = null_count / len(data)
pd.DataFrame({
    'Count': null_count,
    'Proportion': null_prop})

data = data.dropna()

data['Weapon'].fillna('NO WEAPON', inplace = True)

data['CrimeTime'] = data['CrimeTime'].str.replace('24:00:00', '00:00:00')

data['Date'] = data['CrimeDate'] + ' ' + data['CrimeTime']
data['Date'] = pd.to_datetime(data['Date'])

data['Day'] = data['Date'].dt.day
data['Month'] = data['Date'].dt.month
data['Year'] = data['Date'].dt.year
data['Weekday'] = data['Date'].dt.weekday + 1
data['Hour'] = data['Date'].dt.hour

data = data.drop(['CrimeDate', 'CrimeTime'], axis = 1)

data['Inside/Outside'].value_counts()
data['Inside/Outside'] = data['Inside/Outside'].replace('I', 'Inside')
data['Inside/Outside'] = data['Inside/Outside'].replace('O', 'Outside')

"""## Day of Month"""

plt.figure(figsize=(7,4), dpi=80)

plt.title('Frequency of Crime by Day of Month', fontsize=13)
ax = sns.countplot(x = 'Day', data = data)
plt.ylabel("Crime Frequency", fontsize=13)
plt.xlabel('Day of Month', fontsize=13)
plt.plot()

plt.figure(figsize=(7,4), dpi=80)

plt.title('Frequency of Crime by Month', fontsize=13)
ax = sns.countplot(x = 'Month', data = data)
plt.ylabel("Crime Frequency", fontsize=13)
plt.xlabel('Month', fontsize=13)
plt.xticks(rotation = 45)
labels = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'] 
ax.set_xticklabels(labels)
plt.plot()

"""## Year"""

plt.figure(figsize=(9,4), dpi=80)

plt.title('Frequency of Crime by Year', fontsize=13)
ax = sns.countplot(x = 'Year', data = data)
plt.ylabel("Crime Frequency", fontsize=13)
plt.xlabel('Year', fontsize=13)
plt.plot()
#

plt.figure(figsize=(20,6), dpi=80)

plt.title('Frequency of Crime by Police Description', fontsize=13)
ax = sns.countplot(x = 'Description', data =data)
plt.ylabel("Crime Frequency", fontsize=13)
plt.xlabel('Description', fontsize=13)
plt.xticks(rotation = 45)
plt.plot()

plt.figure(figsize=(10,4), dpi=80)

plt.title('Frequency of Crime by District', fontsize=13)
ax = sns.countplot(x = 'District', data = data)
plt.ylabel("Crime Frequency", fontsize=13)
plt.xlabel('District', fontsize=13)
plt.xticks(rotation = 45)
plt.plot()





plt.figure(figsize = (10, 4), dpi = 80)

ax = sns.countplot(x = "Year", hue = "Weapon", data = data)
plt.ylabel("Frequency of Crime per Year Grouped by Weapon Used", fontsize = 13)
plt.ylabel("Crime Frequency", fontsize = 13)
plt.xlabel("Year", fontsize = 13)
plt.plot()

plt.figure(figsize=(10,4), dpi=80)

plt.title('Frequency of Crime by District', fontsize=13)
ax = sns.countplot(x = 'District', data = data)
plt.ylabel("Crime Frequency", fontsize=13)
plt.xlabel('District', fontsize=13)
plt.xticks(rotation = 45)
plt.plot()

plt.figure(figsize=(9,4), dpi=80)

plt.title('Frequency of Crime by District', fontsize=13)
ax = sns.countplot(x = 'District', hue = 'Inside/Outside', data = data)
plt.ylabel("Crime Frequency", fontsize=13)
plt.xlabel('District', fontsize=13)
plt.xticks(rotation = 45)
plt.plot()

# scorewith 
crime_scores = data.groupby('Neighborhood')['Total Incidents'].sum()


score_table = pd.DataFrame({'Neighborhood': crime_scores.index, 'Crime Score': crime_scores.values})
score_table = score_table.sort_values(by='Crime Score', ascending=False)

# 可视化得分
# plt.figure(figsize=(12, 6))
# sns.barplot(x='Crime Score', y='Neighborhood', data=score_table)
# plt.xlabel('Crime Score')
# plt.ylabel('Neighborhood')
# plt.title('Crime Scores by Neighborhood')
# plt.show()

# # 显示总结表格
# top 20
top_20 = score_table.head(20)

# score
plt.figure(figsize=(12, 8))
sns.barplot(x='Crime Score', y='Neighborhood', data=top_20)
plt.xlabel('Crime Score')
plt.ylabel('Neighborhood')
plt.title('Top 20 Neighborhoods by Crime Score')
plt.show()


print(top_20)

import folium
from folium.plugins import HeatMap

data = data[pd.notnull(data['Latitude'])]
data = data[pd.notnull(data['Longitude'])]

# data['Latitude'].median()

# data['Longitude'].median()

def generateBaseMap(default_location = [39.30364, -76.6139599], default_zoom_start = 12):
    base_map = folium.Map(location = default_location, control_scale = True, zoom_start = default_zoom_start)
    return base_map

base_map = generateBaseMap()

data['count'] = 1

df_murder = data[data['Description'] == 'HOMICIDE']

HeatMap(
        data = df_murder[['Latitude', 'Longitude', 'count']].groupby(
            ['Latitude', 'Longitude']).sum().reset_index().values.tolist(),
        radius = 8,
        max_zoom = 13).add_to(base_map)
base_map

